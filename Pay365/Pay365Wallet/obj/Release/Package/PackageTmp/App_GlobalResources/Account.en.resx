<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AccountName" xml:space="preserve">
    <value>Account number</value>
  </data>
  <data name="BackPrevStep" xml:space="preserve">
    <value>Go back to the previous step</value>
  </data>
  <data name="BtnBack" xml:space="preserve">
    <value>Back</value>
  </data>
  <data name="BtnConfirm" xml:space="preserve">
    <value>Confirm</value>
  </data>
  <data name="BtnSendRequest" xml:space="preserve">
    <value>Send request</value>
  </data>
  <data name="Captcha" xml:space="preserve">
    <value>Captcha</value>
  </data>
  <data name="ChangeLimitation" xml:space="preserve">
    <value>Change Limit</value>
  </data>
  <data name="ChangePassSuccess" xml:space="preserve">
    <value>Change password success</value>
  </data>
  <data name="EmailAddress" xml:space="preserve">
    <value>Email</value>
  </data>
  <data name="EmailGetSecureCode" xml:space="preserve">
    <value>Emai received OTP</value>
  </data>
  <data name="EnterVerifyCode" xml:space="preserve">
    <value>Enter OTP</value>
  </data>
  <data name="ForgotPass" xml:space="preserve">
    <value>Forgot Password</value>
  </data>
  <data name="getVerifyCode" xml:space="preserve">
    <value>to get the authentication code</value>
  </data>
  <data name="Limitation" xml:space="preserve">
    <value>Secure limit</value>
  </data>
  <data name="LimitationRegister" xml:space="preserve">
    <value>Limits want to register</value>
  </data>
  <data name="NewPassword" xml:space="preserve">
    <value>New password</value>
  </data>
  <data name="NoteOTP1" xml:space="preserve">
    <value>The secure limit is the minimum value for a transaction of which you want to transfer money without an OTP </value>
  </data>
  <data name="NoteOTP2" xml:space="preserve">
    <value>Please download the application and follow the instructions for secure registration</value>
  </data>
  <data name="NoteOTP3" xml:space="preserve">
    <value>The system will call you to send the OTP code to confirm the registration</value>
  </data>
  <data name="NoteOTPApp" xml:space="preserve">
    <value>To authorize and complete selected transactions, you must use the Pay365 OTP application on your mobile to get A 6-digit OTP</value>
  </data>
  <data name="NoteOTPEmail" xml:space="preserve">
    <value>A 6-digit OTP will be sent to your verified email </value>
  </data>
  <data name="NoteOTPSMS" xml:space="preserve">
    <value>A 6-digit OTP will be sent to your registered mobile number </value>
  </data>
  <data name="NoteOTPVoice" xml:space="preserve">
    <value>A 6-digit OTP will be sent to your registered mobile number (0946438891) via calling to authorize and complete selected transactions</value>
  </data>
  <data name="OldPassword" xml:space="preserve">
    <value>Old password</value>
  </data>
  <data name="RegisterOTP" xml:space="preserve">
    <value>Security Registration OTP</value>
  </data>
  <data name="RenewPassword" xml:space="preserve">
    <value>Confirm password</value>
  </data>
  <data name="Resend" xml:space="preserve">
    <value>Resend OTP</value>
  </data>
  <data name="ResetPassViaEmail" xml:space="preserve">
    <value>Reset password via Email</value>
  </data>
  <data name="ResetPassViaSMS" xml:space="preserve">
    <value>Reset password via SMS</value>
  </data>
  <data name="ResetPassViaSupport" xml:space="preserve">
    <value>Reset password via hotline</value>
  </data>
  <data name="ResetPassword" xml:space="preserve">
    <value>Reset password</value>
  </data>
  <data name="ResetPasswordSuccess" xml:space="preserve">
    <value>You have changed the password successfully, popup automatically close after &lt;span id="countdwn"&gt;5&lt;/span&gt; seconds, automatically return to the login page</value>
  </data>
  <data name="RulePassword1" xml:space="preserve">
    <value>6 to 18 characters</value>
  </data>
  <data name="RulePassword2" xml:space="preserve">
    <value>Both letters and numbers</value>
  </data>
  <data name="Secure" xml:space="preserve">
    <value>Security</value>
  </data>
  <data name="SecureType" xml:space="preserve">
    <value>Security type</value>
  </data>
  <data name="Send" xml:space="preserve">
    <value>send</value>
  </data>
  <data name="SetupSecure" xml:space="preserve">
    <value>Security settings</value>
  </data>
  <data name="StringMsg1" xml:space="preserve">
    <value>An OTP has been sent to phone number: </value>
  </data>
  <data name="StringMsg2" xml:space="preserve">
    <value>Did not receive OTP? Compose a message &lt;span class="secondary"&gt;PAY365 MK&lt;/span&gt; syntax sent to &lt;span class="secondary"&gt;8095&lt;/span &gt; (1.000VNĐ/SMS)</value>
  </data>
  <data name="StringMsg3" xml:space="preserve">
    <value>An verify code has been sent to the email</value>
  </data>
  <data name="StringMsg4" xml:space="preserve">
    <value>Please click the resend button to receive the verify code. If you do not receive the code, compose the message &lt;strong class="danger"&gt;PAY365 MK&lt;/strong&gt; send &lt;strong class="danger"&gt;8095&lt;/strong&gt; (500đ/SMS)</value>
  </data>
  <data name="TextSMS" xml:space="preserve">
    <value>Text</value>
  </data>
  <data name="VerifyCode" xml:space="preserve">
    <value>Enter OTP</value>
  </data>
  <data name="ViaEmail" xml:space="preserve">
    <value>Via Email</value>
  </data>
  <data name="ViaSms" xml:space="preserve">
    <value>Via SMS</value>
  </data>
  <data name="ViaSupport" xml:space="preserve">
    <value>Via Support</value>
  </data>
  <data name="LimitationNew" xml:space="preserve">
    <value>Enter new secure limit</value>
  </data>
  <data name="BtnUpdate" xml:space="preserve">
    <value>Update</value>
  </data>
  <data name="PleaseEnterCode" xml:space="preserve">
    <value>Please enter your code to confirm.</value>
  </data>
  <data name="MobileReceiveSecure" xml:space="preserve">
    <value>Phone number to receive OTP</value>
  </data>
  <data name="NoteSecureOTPSMS" xml:space="preserve">
    <value>Did not receive the code, please compose the message &lt;strong class="danger"&gt;PAY365 BM&lt;/strong&gt; send &lt;strong class="danger"&gt;8095&lt;/strong&gt; &lt;span class="warning"&gt;(1.000VNĐ/SMS)&lt;/span&gt;</value>
  </data>
  <data name="NoteLimitSecure" xml:space="preserve">
    <value>The secure limit is the minimum value for a transaction of which you need to enter OTP to confirm your transaction</value>
  </data>
</root>